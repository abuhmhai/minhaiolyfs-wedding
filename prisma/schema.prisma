generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  fullName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String?
  role      Role     @default(user)
  blogs     Blog[]
  cart      Cart?
  orders    Order[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id              Int                     @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  slug            String                  @unique
  color           String?
  style           String?
  stockQuantity   Int                     @default(0)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  categoryId      Int
  status          ProductStatus           @default(IN_STOCK)
  cartItems       CartItem[]
  orderItems      OrderItem[]
  category        Category                @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  rentalDurations ProductRentalDuration[]
  productSizes    ProductSize[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId], map: "ProductImage_productId_fkey")
}

model ProductSize {
  id        Int      @id @default(autoincrement())
  name      String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId], map: "ProductSize_productId_fkey")
}

model ProductRentalDuration {
  id         Int         @id @default(autoincrement())
  name       String
  price      Float
  productId  Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id])

  @@index([productId], map: "ProductRentalDuration_productId_fkey")
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?
  slug      String   @unique
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "Blog_authorId_fkey")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id               Int                    @id @default(autoincrement())
  cartId           Int
  productId        Int
  quantity         Int
  color            String?
  type             String?
  style            String?
  rentalStartDate  DateTime?
  rentalEndDate    DateTime?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  rentalDurationId Int?
  size             String?
  cart             Cart                   @relation(fields: [cartId], references: [id])
  product          Product                @relation(fields: [productId], references: [id])
  rentalDuration   ProductRentalDuration? @relation(fields: [rentalDurationId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId], map: "CartItem_cartId_fkey")
  @@index([productId], map: "CartItem_productId_fkey")
  @@index([rentalDurationId], map: "CartItem_rentalDurationId_fkey")
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id               Int                    @id @default(autoincrement())
  orderId          Int
  productId        Int
  quantity         Int
  price            Float
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  rentalDurationId Int?
  size             String?
  order            Order                  @relation(fields: [orderId], references: [id])
  product          Product                @relation(fields: [productId], references: [id])
  rentalDuration   ProductRentalDuration? @relation(fields: [rentalDurationId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
  @@index([rentalDurationId], map: "OrderItem_rentalDurationId_fkey")
}

enum Role {
  admin
  user
}

enum ProductStatus {
  IN_STOCK
  OUT_OF_STOCK
  LOW_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum WeddingDressStyle {
  DANG_XOE_BALLGOWN
  DANG_CHU_A
  DANG_DUOI_CA_MERMAID
}

enum WeddingDressColor {
  OFFWHITE
  IVORY
  NUDE
}

enum AoDaiColor {
  DO
  HONG
  TRANG
}
